substitutions:
  devicename: synclight
  upper_devicename: Synclight
  mqtt_server: IP or hostname of your MQTT server
  # This key is used to sync the devices, all devices with the same key will sync their state
  key: key

esphome:
  name: $devicename
  friendly_name: $upper_devicename

esp8266:
  board: esp12e

globals:
  - id: change_published
    type: int
    # 0 = off, 1 = on
    initial_value: "0"
  - id: manual_change
    type: int
    # 0 = off, 1 = on
    initial_value: "0"

api:
  encryption:
    key: !secret api_encryption_key

logger:
  level: INFO

ota:
  password: !secret ota_password

wifi:
  ap:
    ssid: "Synclight Hotspot"
    password: !secret wifi_ap_password

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

mqtt:
  broker: $mqtt_server
  port: 1883
  discovery: false
  log_topic: null
  on_json_message:
    topic: sl/$key/change/light
    then:
      if:
        condition:
          lambda: |-
            if (id(manual_change) == 1) {
              id(manual_change) = 0;
              ESP_LOGI("mqtt.on_json_message condition", "Ignoring event because it was sent by us");
              return false;
            }
            return true;
        then:
          lambda: |-
            auto json_message = x;

            auto call = id(lights).make_call();
            call.set_state(json_message["enabled"].as<bool>());
            call.set_brightness(json_message["brightness"].as<float>());
            call.set_rgb(json_message["red"].as<float>(), json_message["green"].as<float>(), json_message["blue"].as<float>());
            call.set_effect(json_message["effect"].as<const char*>());
            id(change_published) = 1;
            ESP_LOGI("mqtt.on_json_message", "Changing state because of button press");
            call.perform();

sensor:
  - platform: adc
    pin: A0
    id: "circle_sensor"
    update_interval: 800ms
    on_value_range:
      - above: 0.1
        then:
          lambda: !lambda |-
            id(circle_sensor).publish_state(0.2);

binary_sensor:
  - platform: analog_threshold
    id: button
    sensor_id: circle_sensor
    threshold: 0.1
    on_multi_click:
      - timing:
          - ON for at least 5s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Long Click"
      - timing:
          - ON for at most 4s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Short Click"
          - select.next: color_select

select:
  - platform: template
    name: "Colors"
    id: color_select
    optimistic: true
    options:
      - red
      - blue
      - green
      - rainbow
    initial_option: blue
    state_topic: sl/$key/status/select
    on_value:
      then:
        - mqtt.publish:
            topic: sl/$key/change/light
            payload: !lambda |-
              auto enabled    = true;
              auto effect     = "none";
              auto brightness = 0.5;
              auto red   = 1.f;
              auto green = 1.f;
              auto blue  = 1.f;

              if (id(color_select).state == "red") {
                red   = 1.f;
                green = 0.f;
                blue  = 0.f;
              }
              else if (id(color_select).state == "green") {
                red   = 0.f;
                green = 1.f;
                blue  = 0.f;
              }
              else if (id(color_select).state == "blue") {
                red   = 0.f;
                green = 0.f;
                blue  = 1.f;
              }
              else if (id(color_select).state == "rainbow") {
                red    = 1.f;
                green  = 1.f;
                blue   = 1.f;
                effect = "addressable_rainbow";
              }
              auto light_id = id(lights);
              auto light_values = light_id->remote_values;

              StaticJsonDocument<512> state;

              state["enabled"]    = enabled;
              state["effect"]     = effect;
              state["brightness"] = brightness;
              state["green"]      = green;
              state["red"]        = red;
              state["blue"]       = blue;

              std::string state_str;
              serializeJson(state, state_str);

              ESP_LOGI("select.mqtt.publish", "Sending change event because of button press");
              return state_str;

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO4
    num_leds: 21
    name: "lights"
    id: lights
    retain: true
    command_topic: sl/$key/status/light
    on_state:
      then:
        if:
          condition:
            lambda: |-
              if (id(change_published) == 1) {
                ESP_LOGI("light.on_state condition", "Ignoring state change because it was caused by event");
                id(change_published) = 0;
                return false;
              }
              return true;
          then:
            - mqtt.publish:
                topic: sl/$key/change/light
                payload: !lambda |-
                  auto light_id = id(lights);
                  auto light_values = light_id->remote_values;

                  StaticJsonDocument<512> state;

                  state["enabled"]    = light_values.is_on();
                  state["effect"]     = light_id->get_effect_name();
                  state["brightness"] = light_values.get_brightness();
                  state["green"]      = light_values.get_green();
                  state["red"]        = light_values.get_red();
                  state["blue"]       = light_values.get_blue();

                  std::string state_str;
                  serializeJson(state, state_str);

                  id(manual_change) = 1;

                  ESP_LOGI("light.mqtt.publish", "Sending change event because of web gui");
                  return state_str;
    # Use effects carefully, and test them individually, some can cause instability
    effects:
      - addressable_rainbow:
          name: addressable_rainbow
          speed: 10
          width: 50
